
//----------------------------------------------------------------------------------
// <autogenerated>
//		This code was generated by a tool.
//		Changes to this file may cause incorrect behaviour and will be lost 
//		if the code is regenerated.
// </autogenerated>
//----------------------------------------------------------------------------------

using System;
using System.Text;
using System.Collections;
using System.ComponentModel;
using System.Globalization;
using Soneta.Types;
using Soneta.Business;
using Soneta.Handel;
using Soneta.Towary;
using Soneta.Napoje;

[assembly: ModuleType("Napoje", typeof(Soneta.Napoje.NapojeModule), 4, "Napoje", 4, VersionNumber=1)]

namespace Soneta.Napoje {

	/// <summary>
	/// Moduł Napoje.
	/// <seealso cref="Soneta.Handel"/>
	/// <seealso cref="Soneta.Towary"/>
	/// </summary>
	/// <seealso cref="Soneta.Business.Module"/>
	/// <seealso cref="Soneta.Business.Session"/>
	[System.CodeDom.Compiler.GeneratedCode("Soneta.Generator", "4")]
	public partial class NapojeModule : Module {

		public static NapojeModule GetInstance(ISessionable session) => (NapojeModule)session?.Session?.Modules[moduleInfo];

		private static Soneta.Business.App.ModuleInfo moduleInfo = new Soneta.Business.App.ModuleInfo(session => new NapojeModule(session)) {
		};

		NapojeModule(Session session) : base(session) {}

		private HandelModule moduleHandel;

		[Browsable(false)]
		public HandelModule Handel => moduleHandel ?? (moduleHandel = HandelModule.GetInstance(Session));

		private TowaryModule moduleTowary;

		[Browsable(false)]
		public TowaryModule Towary => moduleTowary ?? (moduleTowary = TowaryModule.GetInstance(Session));

		private static Soneta.Business.App.TableInfo tableInfoNapoje = new Soneta.Business.App.TableInfo.Create<Napoje, Napoj, NapojRecord>("Napoj") {
		};

		public Napoje Napoje => (Napoje)Session.Tables[tableInfoNapoje];

		private static Soneta.Business.App.KeyInfo keyInfoNapojTowar = new Soneta.Business.App.KeyInfo(tableInfoNapoje, table => new NapojTable.TowarRelation(table)) {
			Name = "Relacja pola Towar",
			RelationTo = "Towar",
			DeleteCascade = true,
			Unique = true,
			PrimaryKey = true,
			KeyFields = new[] {"Towar"},
		};

		private static Soneta.Business.App.KeyInfo keyInfoNapojKategoria = new Soneta.Business.App.KeyInfo(tableInfoNapoje, table => new NapojTable.KategoriaRelation(table)) {
			Name = "Relacja pola Kategoria",
			RelationTo = "KategoriaNapoju",
			KeyFields = new[] {"Kategoria", "ID"},
		};

		private static Soneta.Business.App.KeyInfo keyInfoNapojProducent = new Soneta.Business.App.KeyInfo(tableInfoNapoje, table => new NapojTable.ProducentRelation(table)) {
			Name = "Relacja pola Producent",
			RelationTo = "ProducentNapoju",
			KeyFields = new[] {"Producent", "ID"},
		};

		/// <summary>
		/// Klasa implementująca standardową obsługę tabeli obiektów Napoj.
		/// Dziedzicząca klasa <see cref="Napoje"/> zawiera kod użytkownika
		/// zawierający specyficzną funkcjonalność tabeli, która nie zawiera się w funkcjonalności
		/// biblioteki <see cref="Soneta.Business"/>.
		/// </summary>
		/// <seealso cref="Napoje"/>
		/// <seealso cref="NapojRow"/>
		/// <seealso cref="Napoj"/>
		/// <seealso cref="Soneta.Business.Table"/>
		[Caption("Napoje")]
		public abstract partial class NapojTable : GuidedTable {

			protected NapojTable() {}

			public class TowarRelation : Key<Napoj> {
				internal TowarRelation(Table table) : base(table) {
				}

				protected override object[] GetData(Row row, Record rec) => new object[] {
					((NapojRecord)rec).Towar
				};

				public Napoj this[Towar towar] => (Napoj)Find(towar);
			}

			public TowarRelation WgTowar => (TowarRelation)Session.Keys[keyInfoNapojTowar];

			public class KategoriaRelation : Key<Napoj> {
				internal KategoriaRelation(Table table) : base(table) {
				}

				protected override object[] GetData(Row row, Record rec) => new object[] {
					((NapojRecord)rec).Kategoria,
					row.ID
				};

				public SubTable<Napoj> this[KategoriaNapoju kategoria] => new SubTable<Napoj>(this, kategoria);
			}

			public KategoriaRelation WgKategoria => (KategoriaRelation)Session.Keys[keyInfoNapojKategoria];

			public class ProducentRelation : Key<Napoj> {
				internal ProducentRelation(Table table) : base(table) {
				}

				protected override object[] GetData(Row row, Record rec) => new object[] {
					((NapojRecord)rec).Producent,
					row.ID
				};

				public SubTable<Napoj> this[ProducentNapoju producent] => new SubTable<Napoj>(this, producent);
			}

			public ProducentRelation WgProducent => (ProducentRelation)Session.Keys[keyInfoNapojProducent];


			/// <summary>
			/// Typowane property dostarczające obiekt modułu zawierającegą tą tabelę. Umożliwia dostęp do
			/// innych obiektów znajdujących się w tym samym module.
			/// </summary>
			/// <seealso cref="NapojeModule"/>
			public new NapojeModule Module => (NapojeModule)base.Module;

			/// <summary>
			/// Typowany indekser dostarczający obiekty znajdujące się w tej tabeli przy pomocy 
			/// ID identyfikującego jednoznacznie obiekt w systemie.
			/// </summary>
			/// <param name="id">Liczba będąca unikalnym identyfikatorem obiektu. Wartości
			/// ujemne identyfikują obiekty, które zostały dodane i nie są jeszcze zapisane do bazy danych.</param>
			/// <seealso cref="Napoj"/>
			public new Napoj this[int id] => (Napoj)base[id];

			/// <summary>
			/// Typowany indekser dostarczający obiekty znajdujące się w tej tabeli przy pomocy 
			/// tablicy ID identyfikujących jednoznacznie obiekt w systemie.
			/// </summary>
			/// <param name="id">Tablica liczb będąca unikalnymi identyfikatorami obiektu. Wartości
			/// ujemne identyfikują obiekty, które zostały dodane i nie są jeszcze zapisane do bazy danych.</param>
			/// <seealso cref="Napoj"/>
			public new Napoj[] this[int[] ids] => (Napoj[])base[ids];

			public new Napoj this[Guid guid] => (Napoj)base[guid];

			protected override Row CreateRow(RowCreator creator) => new Napoj();

			[Soneta.Langs.TranslateIgnore]
			protected override sealed void PrepareNames(StringBuilder names, string divider) {
				names.Append(divider); names.Append("Guid");
				names.Append(divider); names.Append("Towar");
				names.Append(divider); names.Append("Kategoria");
				names.Append(divider); names.Append("Producent");
			}

		}

		[Caption("Napój")]
		public abstract partial class NapojRow : GuidedRow {

			private NapojRecord record;

			protected override void AssignRecord(Record rec) {
				record = (NapojRecord)rec;
			}

			protected NapojRow() : base(true) {
			}

			protected override Row PrimaryRow => null;

			[Description("Dodatkowe opcje kartoteki towaru dotyczące napojów")]
			[Caption("Towar")]
			[Required]
			public Towar Towar {
				get {
					if (record==null) GetRecord();
					return (Towar)GetRowReference(ref record.Towar);
				}
			}

			protected Towar baseTowar {
				set {
					NapojSchema.TowarBeforeEdit?.Invoke((Napoj)this, ref value);
					System.Diagnostics.Debug.Assert(value==null || State==RowState.Detached || value.State==RowState.Detached || Session==value.Session);
					GetEdit(record==null, false);
					if (value==null) throw new RequiredException(this, "Towar");
					record.Towar = value;
					if (State!=RowState.Detached) {
						ResyncSet(keyInfoNapojTowar);
					}
					NapojSchema.TowarAfterEdit?.Invoke((Napoj)this);
				}
			}

			[Caption("Kategoria napoju")]
			[Required]
			public KategoriaNapoju Kategoria {
				get {
					if (record==null) GetRecord();
					return (KategoriaNapoju)GetRowReference(ref record.Kategoria);
				}
				set {
					NapojSchema.KategoriaBeforeEdit?.Invoke((Napoj)this, ref value);
					System.Diagnostics.Debug.Assert(value==null || State==RowState.Detached || value.State==RowState.Detached || Session==value.Session);
					GetEdit(record==null, false);
					if (value==null) throw new RequiredException(this, "Kategoria");
					record.Kategoria = value;
					if (State!=RowState.Detached) {
						ResyncSet(keyInfoNapojKategoria);
					}
					NapojSchema.KategoriaAfterEdit?.Invoke((Napoj)this);
				}
			}

			[Caption("Producent napoju")]
			public ProducentNapoju Producent {
				get {
					if (record==null) GetRecord();
					return (ProducentNapoju)GetRowReference(ref record.Producent);
				}
				set {
					NapojSchema.ProducentBeforeEdit?.Invoke((Napoj)this, ref value);
					System.Diagnostics.Debug.Assert(value==null || State==RowState.Detached || value.State==RowState.Detached || Session==value.Session);
					GetEdit(record==null, false);
					record.Producent = value;
					if (State!=RowState.Detached) {
						ResyncSet(keyInfoNapojProducent);
					}
					NapojSchema.ProducentAfterEdit?.Invoke((Napoj)this);
				}
			}

			[Browsable(false)]
			public new Napoje Table => (Napoje)base.Table;

			[Browsable(false)]
			public NapojeModule Module => Table.Module;

			protected override Soneta.Business.App.TableInfo TableInfo => tableInfoNapoje;

			public sealed override AccessRights GetObjectRight() {
				AccessRights ar = CalcObjectRight();
				NapojSchema.OnCalcObjectRight?.Invoke((Napoj)this, ref ar);
				return ar;
			}

			protected sealed override AccessRights GetParentsObjectRight() {
				AccessRights result = CalcParentsObjectRight();
				NapojSchema.OnCalcParentsObjectRight?.Invoke((Napoj)this, ref result);
				return result;
			}

			protected override bool CalcReadOnly() {
				bool result = false;
				NapojSchema.OnCalcReadOnly?.Invoke((Napoj)this, ref result);
				return result;
			}

			class TowarRequiredVerifier : RequiredVerifier {
				internal TowarRequiredVerifier(IRow row) : base(row, "Towar") {
				}
				protected override bool IsValid() => ((NapojRow)Row).Towar!=null;
			}

			class KategoriaRequiredVerifier : RequiredVerifier {
				internal KategoriaRequiredVerifier(IRow row) : base(row, "Kategoria") {
				}
				protected override bool IsValid() => ((NapojRow)Row).Kategoria!=null;
			}

			protected override void OnAdded() {
				base.OnAdded();
				Session.Verifiers.Add(new TowarRequiredVerifier(this));
				System.Diagnostics.Debug.Assert(record.Towar==null || record.Towar.State==RowState.Detached || Session==record.Towar.Session);
				Session.Verifiers.Add(new KategoriaRequiredVerifier(this));
				System.Diagnostics.Debug.Assert(record.Kategoria==null || record.Kategoria.State==RowState.Detached || Session==record.Kategoria.Session);
				System.Diagnostics.Debug.Assert(record.Producent==null || record.Producent.State==RowState.Detached || Session==record.Producent.Session);
				NapojSchema.OnAdded?.Invoke((Napoj)this);
			}

			protected override void OnLoaded() {
				base.OnLoaded();
				NapojSchema.OnLoaded?.Invoke((Napoj)this);
			}

			protected override void OnEditing() {
				base.OnEditing();
				NapojSchema.OnEditing?.Invoke((Napoj)this);
			}

			protected override void OnDeleting() {
				base.OnDeleting();
				NapojSchema.OnDeleting?.Invoke((Napoj)this);
			}

			protected override void OnDeleted() {
				base.OnDeleted();
				NapojSchema.OnDeleted?.Invoke((Napoj)this);
			}

			protected override void OnRepacked() {
				base.OnRepacked();
				NapojSchema.OnRepacked?.Invoke((Napoj)this);
			}

		}

		public sealed class NapojRecord : GuidedRecord {
			[Required]
			[ParentTable("Towar")]
			public IRow Towar;
			[Required]
			[ParentTable("KategoriaNapoju")]
			public IRow Kategoria;
			[ParentTable("ProducentNapoju")]
			public IRow Producent;

			public override Record Clone() {
				NapojRecord rec = (NapojRecord)MemberwiseClone();
				return rec;
			}

			public override void Load(RecordReader creator) {
				Guid = creator.Read_guid();
				Towar = creator.Read_Row("Towary");
				Kategoria = creator.Read_Row(tableInfoKategorieNapoj);
				Producent = creator.Read_Row(tableInfoProducenciNapoj);
			}
		}

		public static class NapojSchema {

			internal static RowDelegate<NapojRow, Towar> TowarBeforeEdit;
			public static void AddTowarBeforeEdit(RowDelegate<NapojRow, Towar> value)
				=> TowarBeforeEdit = (RowDelegate<NapojRow, Towar>)Delegate.Combine(TowarBeforeEdit, value);

			internal static RowDelegate<NapojRow> TowarAfterEdit;
			public static void AddTowarAfterEdit(RowDelegate<NapojRow> value)
				=> TowarAfterEdit = (RowDelegate<NapojRow>)Delegate.Combine(TowarAfterEdit, value);

			internal static RowDelegate<NapojRow, KategoriaNapoju> KategoriaBeforeEdit;
			public static void AddKategoriaBeforeEdit(RowDelegate<NapojRow, KategoriaNapoju> value)
				=> KategoriaBeforeEdit = (RowDelegate<NapojRow, KategoriaNapoju>)Delegate.Combine(KategoriaBeforeEdit, value);

			internal static RowDelegate<NapojRow> KategoriaAfterEdit;
			public static void AddKategoriaAfterEdit(RowDelegate<NapojRow> value)
				=> KategoriaAfterEdit = (RowDelegate<NapojRow>)Delegate.Combine(KategoriaAfterEdit, value);

			internal static RowDelegate<NapojRow, ProducentNapoju> ProducentBeforeEdit;
			public static void AddProducentBeforeEdit(RowDelegate<NapojRow, ProducentNapoju> value)
				=> ProducentBeforeEdit = (RowDelegate<NapojRow, ProducentNapoju>)Delegate.Combine(ProducentBeforeEdit, value);

			internal static RowDelegate<NapojRow> ProducentAfterEdit;
			public static void AddProducentAfterEdit(RowDelegate<NapojRow> value)
				=> ProducentAfterEdit = (RowDelegate<NapojRow>)Delegate.Combine(ProducentAfterEdit, value);

			internal static RowDelegate<NapojRow> OnLoaded;
			public static void AddOnLoaded(RowDelegate<NapojRow> value)
				=> OnLoaded = (RowDelegate<NapojRow>)Delegate.Combine(OnLoaded, value);

			internal static RowDelegate<NapojRow> OnAdded;
			public static void AddOnAdded(RowDelegate<NapojRow> value)
				=> OnAdded = (RowDelegate<NapojRow>)Delegate.Combine(OnAdded, value);

			internal static RowDelegate<NapojRow> OnEditing;
			public static void AddOnEditing(RowDelegate<NapojRow> value)
				=> OnEditing = (RowDelegate<NapojRow>)Delegate.Combine(OnEditing, value);

			internal static RowDelegate<NapojRow> OnDeleting;
			public static void AddOnDeleting(RowDelegate<NapojRow> value)
				=> OnDeleting = (RowDelegate<NapojRow>)Delegate.Combine(OnDeleting, value);

			internal static RowDelegate<NapojRow> OnDeleted;
			public static void AddOnDeleted(RowDelegate<NapojRow> value)
				=> OnDeleted = (RowDelegate<NapojRow>)Delegate.Combine(OnDeleted, value);

			internal static RowDelegate<NapojRow> OnRepacked;
			public static void AddOnRepacked(RowDelegate<NapojRow> value)
				=> OnRepacked = (RowDelegate<NapojRow>)Delegate.Combine(OnRepacked, value);

			internal static RowAccessRightsDelegate<NapojRow> OnCalcObjectRight;
			public static void AddOnCalcObjectRight(RowAccessRightsDelegate<NapojRow> value)
				=> OnCalcObjectRight = (RowAccessRightsDelegate<NapojRow>)Delegate.Combine(OnCalcObjectRight, value);

			internal static RowAccessRightsDelegate<NapojRow> OnCalcParentsObjectRight;
			public static void AddOnCalcParentsObjectRight(RowAccessRightsDelegate<NapojRow> value)
				=> OnCalcParentsObjectRight = (RowAccessRightsDelegate<NapojRow>)Delegate.Combine(OnCalcParentsObjectRight, value);

			internal static RowReadOnlyDelegate<NapojRow> OnCalcReadOnly;
			public static void AddOnCalcReadOnly(RowReadOnlyDelegate<NapojRow> value)
				=> OnCalcReadOnly = (RowReadOnlyDelegate<NapojRow>)Delegate.Combine(OnCalcReadOnly, value);

		}

		private static Soneta.Business.App.TableInfo tableInfoOplatyNapojow = new Soneta.Business.App.TableInfo.Create<OplatyNapojow, OplataNapoju, OplataNapojuRecord>("OplataNa") {
		};

		public OplatyNapojow OplatyNapojow => (OplatyNapojow)Session.Tables[tableInfoOplatyNapojow];

		private static Soneta.Business.App.KeyInfo keyInfoOplataNapojuPozycja = new Soneta.Business.App.KeyInfo(tableInfoOplatyNapojow, table => new OplataNapojuTable.PozycjaRelation(table)) {
			Name = "Relacja pola Pozycja",
			RelationTo = "PozycjaDokHandlowego",
			DeleteCascade = true,
			Unique = true,
			PrimaryKey = true,
			KeyFields = new[] {"Pozycja"},
		};

		private static Soneta.Business.App.KeyInfo keyInfoOplataNapojuKategoria = new Soneta.Business.App.KeyInfo(tableInfoOplatyNapojow, table => new OplataNapojuTable.KategoriaRelation(table)) {
			Name = "Relacja pola Kategoria",
			RelationTo = "KategoriaNapoju",
			KeyFields = new[] {"Kategoria", "ID"},
		};

		/// <summary>
		/// Klasa implementująca standardową obsługę tabeli obiektów OplataNapoju.
		/// Dziedzicząca klasa <see cref="OplatyNapojow"/> zawiera kod użytkownika
		/// zawierający specyficzną funkcjonalność tabeli, która nie zawiera się w funkcjonalności
		/// biblioteki <see cref="Soneta.Business"/>.
		/// </summary>
		/// <seealso cref="OplatyNapojow"/>
		/// <seealso cref="OplataNapojuRow"/>
		/// <seealso cref="OplataNapoju"/>
		/// <seealso cref="Soneta.Business.Table"/>
		[Caption("Opłaty napojów")]
		public abstract partial class OplataNapojuTable : GuidedTable {

			protected OplataNapojuTable() {}

			public class PozycjaRelation : Key<OplataNapoju> {
				internal PozycjaRelation(Table table) : base(table) {
				}

				protected override object[] GetData(Row row, Record rec) => new object[] {
					((OplataNapojuRecord)rec).Pozycja
				};

				public OplataNapoju this[PozycjaDokHandlowego pozycja] => (OplataNapoju)Find(pozycja);
			}

			public PozycjaRelation WgPozycja => (PozycjaRelation)Session.Keys[keyInfoOplataNapojuPozycja];

			public class KategoriaRelation : Key<OplataNapoju> {
				internal KategoriaRelation(Table table) : base(table) {
				}

				protected override object[] GetData(Row row, Record rec) => new object[] {
					((OplataNapojuRecord)rec).Kategoria,
					row.ID
				};

				public SubTable<OplataNapoju> this[KategoriaNapoju kategoria] => new SubTable<OplataNapoju>(this, kategoria);
			}

			public KategoriaRelation WgKategoria => (KategoriaRelation)Session.Keys[keyInfoOplataNapojuKategoria];


			/// <summary>
			/// Typowane property dostarczające obiekt modułu zawierającegą tą tabelę. Umożliwia dostęp do
			/// innych obiektów znajdujących się w tym samym module.
			/// </summary>
			/// <seealso cref="NapojeModule"/>
			public new NapojeModule Module => (NapojeModule)base.Module;

			/// <summary>
			/// Typowany indekser dostarczający obiekty znajdujące się w tej tabeli przy pomocy 
			/// ID identyfikującego jednoznacznie obiekt w systemie.
			/// </summary>
			/// <param name="id">Liczba będąca unikalnym identyfikatorem obiektu. Wartości
			/// ujemne identyfikują obiekty, które zostały dodane i nie są jeszcze zapisane do bazy danych.</param>
			/// <seealso cref="OplataNapoju"/>
			public new OplataNapoju this[int id] => (OplataNapoju)base[id];

			/// <summary>
			/// Typowany indekser dostarczający obiekty znajdujące się w tej tabeli przy pomocy 
			/// tablicy ID identyfikujących jednoznacznie obiekt w systemie.
			/// </summary>
			/// <param name="id">Tablica liczb będąca unikalnymi identyfikatorami obiektu. Wartości
			/// ujemne identyfikują obiekty, które zostały dodane i nie są jeszcze zapisane do bazy danych.</param>
			/// <seealso cref="OplataNapoju"/>
			public new OplataNapoju[] this[int[] ids] => (OplataNapoju[])base[ids];

			public new OplataNapoju this[Guid guid] => (OplataNapoju)base[guid];

			protected override Row CreateRow(RowCreator creator) => new OplataNapoju();

			[Soneta.Langs.TranslateIgnore]
			protected override sealed void PrepareNames(StringBuilder names, string divider) {
				names.Append(divider); names.Append("Guid");
				names.Append(divider); names.Append("Pozycja");
				names.Append(divider); names.Append("Kategoria");
				names.Append(divider); names.Append("OplataValue");
				names.Append(divider); names.Append("OplataSymbol");
			}

		}

		[Caption("Opłata napoju")]
		public abstract partial class OplataNapojuRow : GuidedRow {

			private OplataNapojuRecord record;

			protected override void AssignRecord(Record rec) {
				record = (OplataNapojuRecord)rec;
			}

			protected OplataNapojuRow() : base(true) {
			}

			protected override Row PrimaryRow => null;

			[Description("Dodatkowe opcje pozycji dokumentu handlowego dotyczące opłaty napojów")]
			[Caption("Pozycja dokumentu handlowego")]
			[Required]
			public PozycjaDokHandlowego Pozycja {
				get {
					if (record==null) GetRecord();
					return (PozycjaDokHandlowego)GetRowReference(ref record.Pozycja);
				}
			}

			protected PozycjaDokHandlowego basePozycja {
				set {
					OplataNapojuSchema.PozycjaBeforeEdit?.Invoke((OplataNapoju)this, ref value);
					System.Diagnostics.Debug.Assert(value==null || State==RowState.Detached || value.State==RowState.Detached || Session==value.Session);
					GetEdit(record==null, false);
					if (value==null) throw new RequiredException(this, "Pozycja");
					record.Pozycja = value;
					if (State!=RowState.Detached) {
						ResyncSet(keyInfoOplataNapojuPozycja);
					}
					OplataNapojuSchema.PozycjaAfterEdit?.Invoke((OplataNapoju)this);
				}
			}

			[Caption("Kategoria napoju")]
			[Required]
			public KategoriaNapoju Kategoria {
				get {
					if (record==null) GetRecord();
					return (KategoriaNapoju)GetRowReference(ref record.Kategoria);
				}
			}

			protected KategoriaNapoju baseKategoria {
				set {
					OplataNapojuSchema.KategoriaBeforeEdit?.Invoke((OplataNapoju)this, ref value);
					System.Diagnostics.Debug.Assert(value==null || State==RowState.Detached || value.State==RowState.Detached || Session==value.Session);
					GetEdit(record==null, false);
					if (value==null) throw new RequiredException(this, "Kategoria");
					record.Kategoria = value;
					if (State!=RowState.Detached) {
						ResyncSet(keyInfoOplataNapojuKategoria);
					}
					OplataNapojuSchema.KategoriaAfterEdit?.Invoke((OplataNapoju)this);
				}
			}

			[Caption("Naliczona opłata")]
			public Currency Oplata {
				get {
					if (record==null) GetRecord();
					return record.Oplata;
				}
			}

			protected Currency baseOplata {
				set {
					OplataNapojuSchema.OplataBeforeEdit?.Invoke((OplataNapoju)this, ref value);
					GetEdit(record==null, false);
					record.Oplata = value;
					OplataNapojuSchema.OplataAfterEdit?.Invoke((OplataNapoju)this);
				}
			}

			[Browsable(false)]
			public new OplatyNapojow Table => (OplatyNapojow)base.Table;

			[Browsable(false)]
			public NapojeModule Module => Table.Module;

			protected override Soneta.Business.App.TableInfo TableInfo => tableInfoOplatyNapojow;

			public sealed override AccessRights GetObjectRight() {
				AccessRights ar = CalcObjectRight();
				OplataNapojuSchema.OnCalcObjectRight?.Invoke((OplataNapoju)this, ref ar);
				return ar;
			}

			protected sealed override AccessRights GetParentsObjectRight() {
				AccessRights result = CalcParentsObjectRight();
				OplataNapojuSchema.OnCalcParentsObjectRight?.Invoke((OplataNapoju)this, ref result);
				return result;
			}

			protected override bool CalcReadOnly() {
				bool result = false;
				OplataNapojuSchema.OnCalcReadOnly?.Invoke((OplataNapoju)this, ref result);
				return result;
			}

			class PozycjaRequiredVerifier : RequiredVerifier {
				internal PozycjaRequiredVerifier(IRow row) : base(row, "Pozycja") {
				}
				protected override bool IsValid() => ((OplataNapojuRow)Row).Pozycja!=null;
			}

			class KategoriaRequiredVerifier : RequiredVerifier {
				internal KategoriaRequiredVerifier(IRow row) : base(row, "Kategoria") {
				}
				protected override bool IsValid() => ((OplataNapojuRow)Row).Kategoria!=null;
			}

			protected override void OnAdded() {
				base.OnAdded();
				Session.Verifiers.Add(new PozycjaRequiredVerifier(this));
				System.Diagnostics.Debug.Assert(record.Pozycja==null || record.Pozycja.State==RowState.Detached || Session==record.Pozycja.Session);
				Session.Verifiers.Add(new KategoriaRequiredVerifier(this));
				System.Diagnostics.Debug.Assert(record.Kategoria==null || record.Kategoria.State==RowState.Detached || Session==record.Kategoria.Session);
				OplataNapojuSchema.OnAdded?.Invoke((OplataNapoju)this);
			}

			protected override void OnLoaded() {
				base.OnLoaded();
				OplataNapojuSchema.OnLoaded?.Invoke((OplataNapoju)this);
			}

			protected override void OnEditing() {
				base.OnEditing();
				OplataNapojuSchema.OnEditing?.Invoke((OplataNapoju)this);
			}

			protected override void OnDeleting() {
				base.OnDeleting();
				OplataNapojuSchema.OnDeleting?.Invoke((OplataNapoju)this);
			}

			protected override void OnDeleted() {
				base.OnDeleted();
				OplataNapojuSchema.OnDeleted?.Invoke((OplataNapoju)this);
			}

			protected override void OnRepacked() {
				base.OnRepacked();
				OplataNapojuSchema.OnRepacked?.Invoke((OplataNapoju)this);
			}

		}

		public sealed class OplataNapojuRecord : GuidedRecord {
			[Required]
			[ParentTable("PozycjaDokHandlowego")]
			public IRow Pozycja;
			[Required]
			[ParentTable("KategoriaNapoju")]
			public IRow Kategoria;
			public Currency Oplata;

			public override Record Clone() {
				OplataNapojuRecord rec = (OplataNapojuRecord)MemberwiseClone();
				return rec;
			}

			public override void Load(RecordReader creator) {
				Guid = creator.Read_guid();
				Pozycja = creator.Read_Row("PozycjeDokHan");
				Kategoria = creator.Read_Row(tableInfoKategorieNapoj);
				Oplata = creator.Read_currency();
			}
		}

		public static class OplataNapojuSchema {

			internal static RowDelegate<OplataNapojuRow, PozycjaDokHandlowego> PozycjaBeforeEdit;
			public static void AddPozycjaBeforeEdit(RowDelegate<OplataNapojuRow, PozycjaDokHandlowego> value)
				=> PozycjaBeforeEdit = (RowDelegate<OplataNapojuRow, PozycjaDokHandlowego>)Delegate.Combine(PozycjaBeforeEdit, value);

			internal static RowDelegate<OplataNapojuRow> PozycjaAfterEdit;
			public static void AddPozycjaAfterEdit(RowDelegate<OplataNapojuRow> value)
				=> PozycjaAfterEdit = (RowDelegate<OplataNapojuRow>)Delegate.Combine(PozycjaAfterEdit, value);

			internal static RowDelegate<OplataNapojuRow, KategoriaNapoju> KategoriaBeforeEdit;
			public static void AddKategoriaBeforeEdit(RowDelegate<OplataNapojuRow, KategoriaNapoju> value)
				=> KategoriaBeforeEdit = (RowDelegate<OplataNapojuRow, KategoriaNapoju>)Delegate.Combine(KategoriaBeforeEdit, value);

			internal static RowDelegate<OplataNapojuRow> KategoriaAfterEdit;
			public static void AddKategoriaAfterEdit(RowDelegate<OplataNapojuRow> value)
				=> KategoriaAfterEdit = (RowDelegate<OplataNapojuRow>)Delegate.Combine(KategoriaAfterEdit, value);

			internal static RowDelegate<OplataNapojuRow, Currency> OplataBeforeEdit;
			public static void AddOplataBeforeEdit(RowDelegate<OplataNapojuRow, Currency> value)
				=> OplataBeforeEdit = (RowDelegate<OplataNapojuRow, Currency>)Delegate.Combine(OplataBeforeEdit, value);

			internal static RowDelegate<OplataNapojuRow> OplataAfterEdit;
			public static void AddOplataAfterEdit(RowDelegate<OplataNapojuRow> value)
				=> OplataAfterEdit = (RowDelegate<OplataNapojuRow>)Delegate.Combine(OplataAfterEdit, value);

			internal static RowDelegate<OplataNapojuRow> OnLoaded;
			public static void AddOnLoaded(RowDelegate<OplataNapojuRow> value)
				=> OnLoaded = (RowDelegate<OplataNapojuRow>)Delegate.Combine(OnLoaded, value);

			internal static RowDelegate<OplataNapojuRow> OnAdded;
			public static void AddOnAdded(RowDelegate<OplataNapojuRow> value)
				=> OnAdded = (RowDelegate<OplataNapojuRow>)Delegate.Combine(OnAdded, value);

			internal static RowDelegate<OplataNapojuRow> OnEditing;
			public static void AddOnEditing(RowDelegate<OplataNapojuRow> value)
				=> OnEditing = (RowDelegate<OplataNapojuRow>)Delegate.Combine(OnEditing, value);

			internal static RowDelegate<OplataNapojuRow> OnDeleting;
			public static void AddOnDeleting(RowDelegate<OplataNapojuRow> value)
				=> OnDeleting = (RowDelegate<OplataNapojuRow>)Delegate.Combine(OnDeleting, value);

			internal static RowDelegate<OplataNapojuRow> OnDeleted;
			public static void AddOnDeleted(RowDelegate<OplataNapojuRow> value)
				=> OnDeleted = (RowDelegate<OplataNapojuRow>)Delegate.Combine(OnDeleted, value);

			internal static RowDelegate<OplataNapojuRow> OnRepacked;
			public static void AddOnRepacked(RowDelegate<OplataNapojuRow> value)
				=> OnRepacked = (RowDelegate<OplataNapojuRow>)Delegate.Combine(OnRepacked, value);

			internal static RowAccessRightsDelegate<OplataNapojuRow> OnCalcObjectRight;
			public static void AddOnCalcObjectRight(RowAccessRightsDelegate<OplataNapojuRow> value)
				=> OnCalcObjectRight = (RowAccessRightsDelegate<OplataNapojuRow>)Delegate.Combine(OnCalcObjectRight, value);

			internal static RowAccessRightsDelegate<OplataNapojuRow> OnCalcParentsObjectRight;
			public static void AddOnCalcParentsObjectRight(RowAccessRightsDelegate<OplataNapojuRow> value)
				=> OnCalcParentsObjectRight = (RowAccessRightsDelegate<OplataNapojuRow>)Delegate.Combine(OnCalcParentsObjectRight, value);

			internal static RowReadOnlyDelegate<OplataNapojuRow> OnCalcReadOnly;
			public static void AddOnCalcReadOnly(RowReadOnlyDelegate<OplataNapojuRow> value)
				=> OnCalcReadOnly = (RowReadOnlyDelegate<OplataNapojuRow>)Delegate.Combine(OnCalcReadOnly, value);

		}

		private static Soneta.Business.App.TableInfo tableInfoKategorieNapoj = new Soneta.Business.App.TableInfo.Create<KategorieNapoj, KategoriaNapoju, KategoriaNapojuRecord>("Kategori") {
		};

		public KategorieNapoj KategorieNapoj => (KategorieNapoj)Session.Tables[tableInfoKategorieNapoj];

		private static Soneta.Business.App.KeyInfo keyInfoKategoriaNapojuNaglowekWgKodu = new Soneta.Business.App.KeyInfo(tableInfoKategorieNapoj, table => new KategoriaNapojuTable.NaglowekWgKoduKey(table)) {
			Name = "Naglowek.WgKodu",
			Unique = true,
			PrimaryKey = true,
			KeyFields = new[] {"Naglowek.Kod"},
		};

		/// <summary>
		/// Klasa implementująca standardową obsługę tabeli obiektów KategoriaNapoju.
		/// Dziedzicząca klasa <see cref="KategorieNapoj"/> zawiera kod użytkownika
		/// zawierający specyficzną funkcjonalność tabeli, która nie zawiera się w funkcjonalności
		/// biblioteki <see cref="Soneta.Business"/>.
		/// </summary>
		/// <seealso cref="KategorieNapoj"/>
		/// <seealso cref="KategoriaNapojuRow"/>
		/// <seealso cref="KategoriaNapoju"/>
		/// <seealso cref="Soneta.Business.Table"/>
		[Caption("Kategorie napojów")]
		public abstract partial class KategoriaNapojuTable : GuidedTable {

			protected KategoriaNapojuTable() {}

			public class NaglowekWgKoduKey : Key<KategoriaNapoju> {
				internal NaglowekWgKoduKey(Table table) : base(table) {
				}

				protected override object[] GetData(Row row, Record rec) => new object[] {
					((KategoriaNapojuRecord)rec).Naglowek.Kod.TrimEnd()
				};

				public KategoriaNapoju this[string kod] => (KategoriaNapoju)Find(kod);
			}

			public NaglowekWgKoduKey NaglowekWgKodu => (NaglowekWgKoduKey)Session.Keys[keyInfoKategoriaNapojuNaglowekWgKodu];


			/// <summary>
			/// Typowane property dostarczające obiekt modułu zawierającegą tą tabelę. Umożliwia dostęp do
			/// innych obiektów znajdujących się w tym samym module.
			/// </summary>
			/// <seealso cref="NapojeModule"/>
			public new NapojeModule Module => (NapojeModule)base.Module;

			/// <summary>
			/// Typowany indekser dostarczający obiekty znajdujące się w tej tabeli przy pomocy 
			/// ID identyfikującego jednoznacznie obiekt w systemie.
			/// </summary>
			/// <param name="id">Liczba będąca unikalnym identyfikatorem obiektu. Wartości
			/// ujemne identyfikują obiekty, które zostały dodane i nie są jeszcze zapisane do bazy danych.</param>
			/// <seealso cref="KategoriaNapoju"/>
			public new KategoriaNapoju this[int id] => (KategoriaNapoju)base[id];

			/// <summary>
			/// Typowany indekser dostarczający obiekty znajdujące się w tej tabeli przy pomocy 
			/// tablicy ID identyfikujących jednoznacznie obiekt w systemie.
			/// </summary>
			/// <param name="id">Tablica liczb będąca unikalnymi identyfikatorami obiektu. Wartości
			/// ujemne identyfikują obiekty, które zostały dodane i nie są jeszcze zapisane do bazy danych.</param>
			/// <seealso cref="KategoriaNapoju"/>
			public new KategoriaNapoju[] this[int[] ids] => (KategoriaNapoju[])base[ids];

			public new KategoriaNapoju this[Guid guid] => (KategoriaNapoju)base[guid];

			protected override Row CreateRow(RowCreator creator) => new KategoriaNapoju();

			[Soneta.Langs.TranslateIgnore]
			protected override sealed void PrepareNames(StringBuilder names, string divider) {
				names.Append(divider); names.Append("Guid");
				NaglowekRecord.PrepareNames(names, divider+"Naglowek");
				names.Append(divider); names.Append("Zablokowany");
				names.Append(divider); names.Append("Oplata");
			}

		}

		[Caption("Kategoria napoju")]
		public abstract partial class KategoriaNapojuRow : GuidedRow, IRowInvoker {

			private KategoriaNapojuRecord record;

			protected override void AssignRecord(Record rec) {
				record = (KategoriaNapojuRecord)rec;
				Naglowek.AssignRecord(record?.Naglowek);
			}

			private void initializer() {
				Naglowek.AssignParent(this, "Naglowek");
			}
			protected KategoriaNapojuRow() : base(true) {
				initializer();
			}

			protected override Row PrimaryRow => null;

			public Naglowek Naglowek { get; } = new Naglowek();

			public virtual bool Zablokowany {
				get {
					if (record==null) GetRecord();
					return record.Zablokowany;
				}
				set {
					KategoriaNapojuSchema.ZablokowanyBeforeEdit?.Invoke((KategoriaNapoju)this, ref value);
					GetEdit(record==null, false);
					record.Zablokowany = value;
					KategoriaNapojuSchema.ZablokowanyAfterEdit?.Invoke((KategoriaNapoju)this);
				}
			}

			public Percent Oplata {
				get {
					if (record==null) GetRecord();
					return record.Oplata;
				}
				set {
					KategoriaNapojuSchema.OplataBeforeEdit?.Invoke((KategoriaNapoju)this, ref value);
					GetEdit(record==null, false);
					record.Oplata = value;
					if (State!=RowState.Detached) {
						Session.Verifiers.Add(new KategoriaNapoju.OplataVerifier((KategoriaNapoju)this));
					}
					KategoriaNapojuSchema.OplataAfterEdit?.Invoke((KategoriaNapoju)this);
				}
			}

			[Browsable(false)]
			public new KategorieNapoj Table => (KategorieNapoj)base.Table;

			[Browsable(false)]
			public NapojeModule Module => Table.Module;

			protected override Soneta.Business.App.TableInfo TableInfo => tableInfoKategorieNapoj;

			public sealed override AccessRights GetObjectRight() {
				AccessRights ar = CalcObjectRight();
				KategoriaNapojuSchema.OnCalcObjectRight?.Invoke((KategoriaNapoju)this, ref ar);
				return ar;
			}

			protected sealed override AccessRights GetParentsObjectRight() {
				AccessRights result = CalcParentsObjectRight();
				KategoriaNapojuSchema.OnCalcParentsObjectRight?.Invoke((KategoriaNapoju)this, ref result);
				return result;
			}

			protected override bool CalcReadOnly() {
				bool result = false;
				KategoriaNapojuSchema.OnCalcReadOnly?.Invoke((KategoriaNapoju)this, ref result);
				return result;
			}

			protected override void OnAdded() {
				base.OnAdded();
				KategoriaNapojuSchema.OnAdded?.Invoke((KategoriaNapoju)this);
			}

			protected override void OnLoaded() {
				base.OnLoaded();
				KategoriaNapojuSchema.OnLoaded?.Invoke((KategoriaNapoju)this);
			}

			protected override void OnEditing() {
				base.OnEditing();
				KategoriaNapojuSchema.OnEditing?.Invoke((KategoriaNapoju)this);
			}

			protected override void OnDeleting() {
				base.OnDeleting();
				KategoriaNapojuSchema.OnDeleting?.Invoke((KategoriaNapoju)this);
			}

			protected override void OnDeleted() {
				base.OnDeleted();
				KategoriaNapojuSchema.OnDeleted?.Invoke((KategoriaNapoju)this);
			}

			protected override void OnRepacked() {
				base.OnRepacked();
				KategoriaNapojuSchema.OnRepacked?.Invoke((KategoriaNapoju)this);
			}

			void IRowInvoker.Invoke(Action<RowBase> invoker) {
				invoker(Naglowek);
			}

		}

		public sealed class KategoriaNapojuRecord : GuidedRecord {
			public NaglowekRecord Naglowek = new NaglowekRecord();
			public bool Zablokowany;
			public Percent Oplata;

			public override Record Clone() {
				KategoriaNapojuRecord rec = (KategoriaNapojuRecord)MemberwiseClone();
				rec.Naglowek = (NaglowekRecord)Naglowek.Clone();
				return rec;
			}

			public override void Load(RecordReader creator) {
				Guid = creator.Read_guid();
				Naglowek.Load(creator);
				Zablokowany = creator.Read_boolean();
				Oplata = creator.Read_percent();
			}
		}

		public static class KategoriaNapojuSchema {

			internal static RowDelegate<KategoriaNapojuRow, bool> ZablokowanyBeforeEdit;
			public static void AddZablokowanyBeforeEdit(RowDelegate<KategoriaNapojuRow, bool> value)
				=> ZablokowanyBeforeEdit = (RowDelegate<KategoriaNapojuRow, bool>)Delegate.Combine(ZablokowanyBeforeEdit, value);

			internal static RowDelegate<KategoriaNapojuRow> ZablokowanyAfterEdit;
			public static void AddZablokowanyAfterEdit(RowDelegate<KategoriaNapojuRow> value)
				=> ZablokowanyAfterEdit = (RowDelegate<KategoriaNapojuRow>)Delegate.Combine(ZablokowanyAfterEdit, value);

			internal static RowDelegate<KategoriaNapojuRow, Percent> OplataBeforeEdit;
			public static void AddOplataBeforeEdit(RowDelegate<KategoriaNapojuRow, Percent> value)
				=> OplataBeforeEdit = (RowDelegate<KategoriaNapojuRow, Percent>)Delegate.Combine(OplataBeforeEdit, value);

			internal static RowDelegate<KategoriaNapojuRow> OplataAfterEdit;
			public static void AddOplataAfterEdit(RowDelegate<KategoriaNapojuRow> value)
				=> OplataAfterEdit = (RowDelegate<KategoriaNapojuRow>)Delegate.Combine(OplataAfterEdit, value);

			internal static RowDelegate<KategoriaNapojuRow> OnLoaded;
			public static void AddOnLoaded(RowDelegate<KategoriaNapojuRow> value)
				=> OnLoaded = (RowDelegate<KategoriaNapojuRow>)Delegate.Combine(OnLoaded, value);

			internal static RowDelegate<KategoriaNapojuRow> OnAdded;
			public static void AddOnAdded(RowDelegate<KategoriaNapojuRow> value)
				=> OnAdded = (RowDelegate<KategoriaNapojuRow>)Delegate.Combine(OnAdded, value);

			internal static RowDelegate<KategoriaNapojuRow> OnEditing;
			public static void AddOnEditing(RowDelegate<KategoriaNapojuRow> value)
				=> OnEditing = (RowDelegate<KategoriaNapojuRow>)Delegate.Combine(OnEditing, value);

			internal static RowDelegate<KategoriaNapojuRow> OnDeleting;
			public static void AddOnDeleting(RowDelegate<KategoriaNapojuRow> value)
				=> OnDeleting = (RowDelegate<KategoriaNapojuRow>)Delegate.Combine(OnDeleting, value);

			internal static RowDelegate<KategoriaNapojuRow> OnDeleted;
			public static void AddOnDeleted(RowDelegate<KategoriaNapojuRow> value)
				=> OnDeleted = (RowDelegate<KategoriaNapojuRow>)Delegate.Combine(OnDeleted, value);

			internal static RowDelegate<KategoriaNapojuRow> OnRepacked;
			public static void AddOnRepacked(RowDelegate<KategoriaNapojuRow> value)
				=> OnRepacked = (RowDelegate<KategoriaNapojuRow>)Delegate.Combine(OnRepacked, value);

			internal static RowAccessRightsDelegate<KategoriaNapojuRow> OnCalcObjectRight;
			public static void AddOnCalcObjectRight(RowAccessRightsDelegate<KategoriaNapojuRow> value)
				=> OnCalcObjectRight = (RowAccessRightsDelegate<KategoriaNapojuRow>)Delegate.Combine(OnCalcObjectRight, value);

			internal static RowAccessRightsDelegate<KategoriaNapojuRow> OnCalcParentsObjectRight;
			public static void AddOnCalcParentsObjectRight(RowAccessRightsDelegate<KategoriaNapojuRow> value)
				=> OnCalcParentsObjectRight = (RowAccessRightsDelegate<KategoriaNapojuRow>)Delegate.Combine(OnCalcParentsObjectRight, value);

			internal static RowReadOnlyDelegate<KategoriaNapojuRow> OnCalcReadOnly;
			public static void AddOnCalcReadOnly(RowReadOnlyDelegate<KategoriaNapojuRow> value)
				=> OnCalcReadOnly = (RowReadOnlyDelegate<KategoriaNapojuRow>)Delegate.Combine(OnCalcReadOnly, value);

		}

		private static Soneta.Business.App.TableInfo tableInfoProducenciNapoj = new Soneta.Business.App.TableInfo.Create<ProducenciNapoj, ProducentNapoju, ProducentNapojuRecord>("Producen") {
		};

		public ProducenciNapoj ProducenciNapoj => (ProducenciNapoj)Session.Tables[tableInfoProducenciNapoj];

		private static Soneta.Business.App.KeyInfo keyInfoProducentNapojuNaglowekWgKodu = new Soneta.Business.App.KeyInfo(tableInfoProducenciNapoj, table => new ProducentNapojuTable.NaglowekWgKoduKey(table)) {
			Name = "Naglowek.WgKodu",
			Unique = true,
			PrimaryKey = true,
			KeyFields = new[] {"Naglowek.Kod"},
		};

		/// <summary>
		/// Klasa implementująca standardową obsługę tabeli obiektów ProducentNapoju.
		/// Dziedzicząca klasa <see cref="ProducenciNapoj"/> zawiera kod użytkownika
		/// zawierający specyficzną funkcjonalność tabeli, która nie zawiera się w funkcjonalności
		/// biblioteki <see cref="Soneta.Business"/>.
		/// </summary>
		/// <seealso cref="ProducenciNapoj"/>
		/// <seealso cref="ProducentNapojuRow"/>
		/// <seealso cref="ProducentNapoju"/>
		/// <seealso cref="Soneta.Business.Table"/>
		[Caption("Producenci napojów")]
		public abstract partial class ProducentNapojuTable : GuidedTable {

			protected ProducentNapojuTable() {}

			public class NaglowekWgKoduKey : Key<ProducentNapoju> {
				internal NaglowekWgKoduKey(Table table) : base(table) {
				}

				protected override object[] GetData(Row row, Record rec) => new object[] {
					((ProducentNapojuRecord)rec).Naglowek.Kod.TrimEnd()
				};

				public ProducentNapoju this[string kod] => (ProducentNapoju)Find(kod);
			}

			public NaglowekWgKoduKey NaglowekWgKodu => (NaglowekWgKoduKey)Session.Keys[keyInfoProducentNapojuNaglowekWgKodu];


			/// <summary>
			/// Typowane property dostarczające obiekt modułu zawierającegą tą tabelę. Umożliwia dostęp do
			/// innych obiektów znajdujących się w tym samym module.
			/// </summary>
			/// <seealso cref="NapojeModule"/>
			public new NapojeModule Module => (NapojeModule)base.Module;

			/// <summary>
			/// Typowany indekser dostarczający obiekty znajdujące się w tej tabeli przy pomocy 
			/// ID identyfikującego jednoznacznie obiekt w systemie.
			/// </summary>
			/// <param name="id">Liczba będąca unikalnym identyfikatorem obiektu. Wartości
			/// ujemne identyfikują obiekty, które zostały dodane i nie są jeszcze zapisane do bazy danych.</param>
			/// <seealso cref="ProducentNapoju"/>
			public new ProducentNapoju this[int id] => (ProducentNapoju)base[id];

			/// <summary>
			/// Typowany indekser dostarczający obiekty znajdujące się w tej tabeli przy pomocy 
			/// tablicy ID identyfikujących jednoznacznie obiekt w systemie.
			/// </summary>
			/// <param name="id">Tablica liczb będąca unikalnymi identyfikatorami obiektu. Wartości
			/// ujemne identyfikują obiekty, które zostały dodane i nie są jeszcze zapisane do bazy danych.</param>
			/// <seealso cref="ProducentNapoju"/>
			public new ProducentNapoju[] this[int[] ids] => (ProducentNapoju[])base[ids];

			public new ProducentNapoju this[Guid guid] => (ProducentNapoju)base[guid];

			protected override Row CreateRow(RowCreator creator) => new ProducentNapoju();

			[Soneta.Langs.TranslateIgnore]
			protected override sealed void PrepareNames(StringBuilder names, string divider) {
				names.Append(divider); names.Append("Guid");
				NaglowekRecord.PrepareNames(names, divider+"Naglowek");
				names.Append(divider); names.Append("Typ");
			}

		}

		[Caption("Producent napoju")]
		public abstract partial class ProducentNapojuRow : GuidedRow, IRowInvoker {

			private ProducentNapojuRecord record;

			protected override void AssignRecord(Record rec) {
				record = (ProducentNapojuRecord)rec;
				Naglowek.AssignRecord(record?.Naglowek);
			}

			private void initializer() {
				Naglowek.AssignParent(this, "Naglowek");
			}
			protected ProducentNapojuRow() : base(true) {
				initializer();
			}

			protected override Row PrimaryRow => null;

			public Naglowek Naglowek { get; } = new Naglowek();

			[Required]
			public TypProducentaNapoju Typ {
				get {
					if (record==null) GetRecord();
					return record.Typ;
				}
				set {
					ProducentNapojuSchema.TypBeforeEdit?.Invoke((ProducentNapoju)this, ref value);
					if (((int)value)==0) throw new RequiredException(this, "Typ");
					GetEdit(record==null, false);
					record.Typ = value;
					ProducentNapojuSchema.TypAfterEdit?.Invoke((ProducentNapoju)this);
				}
			}

			[Browsable(false)]
			public new ProducenciNapoj Table => (ProducenciNapoj)base.Table;

			[Browsable(false)]
			public NapojeModule Module => Table.Module;

			protected override Soneta.Business.App.TableInfo TableInfo => tableInfoProducenciNapoj;

			public sealed override AccessRights GetObjectRight() {
				AccessRights ar = CalcObjectRight();
				ProducentNapojuSchema.OnCalcObjectRight?.Invoke((ProducentNapoju)this, ref ar);
				return ar;
			}

			protected sealed override AccessRights GetParentsObjectRight() {
				AccessRights result = CalcParentsObjectRight();
				ProducentNapojuSchema.OnCalcParentsObjectRight?.Invoke((ProducentNapoju)this, ref result);
				return result;
			}

			protected override bool CalcReadOnly() {
				bool result = false;
				ProducentNapojuSchema.OnCalcReadOnly?.Invoke((ProducentNapoju)this, ref result);
				return result;
			}

			class TypRequiredVerifier : RequiredVerifier {
				internal TypRequiredVerifier(IRow row) : base(row, "Typ") {
				}
				protected override bool IsValid() => !(((int)((ProducentNapojuRow)Row).Typ)==0);
			}

			protected override void OnAdded() {
				base.OnAdded();
				Session.Verifiers.Add(new TypRequiredVerifier(this));
				ProducentNapojuSchema.OnAdded?.Invoke((ProducentNapoju)this);
			}

			protected override void OnLoaded() {
				base.OnLoaded();
				ProducentNapojuSchema.OnLoaded?.Invoke((ProducentNapoju)this);
			}

			protected override void OnEditing() {
				base.OnEditing();
				ProducentNapojuSchema.OnEditing?.Invoke((ProducentNapoju)this);
			}

			protected override void OnDeleting() {
				base.OnDeleting();
				ProducentNapojuSchema.OnDeleting?.Invoke((ProducentNapoju)this);
			}

			protected override void OnDeleted() {
				base.OnDeleted();
				ProducentNapojuSchema.OnDeleted?.Invoke((ProducentNapoju)this);
			}

			protected override void OnRepacked() {
				base.OnRepacked();
				ProducentNapojuSchema.OnRepacked?.Invoke((ProducentNapoju)this);
			}

			void IRowInvoker.Invoke(Action<RowBase> invoker) {
				invoker(Naglowek);
			}

		}

		public sealed class ProducentNapojuRecord : GuidedRecord {
			public NaglowekRecord Naglowek = new NaglowekRecord();
			[Required]
			public TypProducentaNapoju Typ;

			public override Record Clone() {
				ProducentNapojuRecord rec = (ProducentNapojuRecord)MemberwiseClone();
				rec.Naglowek = (NaglowekRecord)Naglowek.Clone();
				return rec;
			}

			public override void Load(RecordReader creator) {
				Guid = creator.Read_guid();
				Naglowek.Load(creator);
				Typ = (TypProducentaNapoju)creator.Read_int();
			}
		}

		public static class ProducentNapojuSchema {

			internal static RowDelegate<ProducentNapojuRow, TypProducentaNapoju> TypBeforeEdit;
			public static void AddTypBeforeEdit(RowDelegate<ProducentNapojuRow, TypProducentaNapoju> value)
				=> TypBeforeEdit = (RowDelegate<ProducentNapojuRow, TypProducentaNapoju>)Delegate.Combine(TypBeforeEdit, value);

			internal static RowDelegate<ProducentNapojuRow> TypAfterEdit;
			public static void AddTypAfterEdit(RowDelegate<ProducentNapojuRow> value)
				=> TypAfterEdit = (RowDelegate<ProducentNapojuRow>)Delegate.Combine(TypAfterEdit, value);

			internal static RowDelegate<ProducentNapojuRow> OnLoaded;
			public static void AddOnLoaded(RowDelegate<ProducentNapojuRow> value)
				=> OnLoaded = (RowDelegate<ProducentNapojuRow>)Delegate.Combine(OnLoaded, value);

			internal static RowDelegate<ProducentNapojuRow> OnAdded;
			public static void AddOnAdded(RowDelegate<ProducentNapojuRow> value)
				=> OnAdded = (RowDelegate<ProducentNapojuRow>)Delegate.Combine(OnAdded, value);

			internal static RowDelegate<ProducentNapojuRow> OnEditing;
			public static void AddOnEditing(RowDelegate<ProducentNapojuRow> value)
				=> OnEditing = (RowDelegate<ProducentNapojuRow>)Delegate.Combine(OnEditing, value);

			internal static RowDelegate<ProducentNapojuRow> OnDeleting;
			public static void AddOnDeleting(RowDelegate<ProducentNapojuRow> value)
				=> OnDeleting = (RowDelegate<ProducentNapojuRow>)Delegate.Combine(OnDeleting, value);

			internal static RowDelegate<ProducentNapojuRow> OnDeleted;
			public static void AddOnDeleted(RowDelegate<ProducentNapojuRow> value)
				=> OnDeleted = (RowDelegate<ProducentNapojuRow>)Delegate.Combine(OnDeleted, value);

			internal static RowDelegate<ProducentNapojuRow> OnRepacked;
			public static void AddOnRepacked(RowDelegate<ProducentNapojuRow> value)
				=> OnRepacked = (RowDelegate<ProducentNapojuRow>)Delegate.Combine(OnRepacked, value);

			internal static RowAccessRightsDelegate<ProducentNapojuRow> OnCalcObjectRight;
			public static void AddOnCalcObjectRight(RowAccessRightsDelegate<ProducentNapojuRow> value)
				=> OnCalcObjectRight = (RowAccessRightsDelegate<ProducentNapojuRow>)Delegate.Combine(OnCalcObjectRight, value);

			internal static RowAccessRightsDelegate<ProducentNapojuRow> OnCalcParentsObjectRight;
			public static void AddOnCalcParentsObjectRight(RowAccessRightsDelegate<ProducentNapojuRow> value)
				=> OnCalcParentsObjectRight = (RowAccessRightsDelegate<ProducentNapojuRow>)Delegate.Combine(OnCalcParentsObjectRight, value);

			internal static RowReadOnlyDelegate<ProducentNapojuRow> OnCalcReadOnly;
			public static void AddOnCalcReadOnly(RowReadOnlyDelegate<ProducentNapojuRow> value)
				=> OnCalcReadOnly = (RowReadOnlyDelegate<ProducentNapojuRow>)Delegate.Combine(OnCalcReadOnly, value);

		}

		private static Soneta.Business.App.SubRowInfo subrowInfoNaglowek = new Soneta.Business.App.SubRowInfo.Create<Naglowek, NaglowekRecord>();

		public abstract partial class NaglowekRow : SubRow {

			private NaglowekRecord record;

			public void AssignRecord(Record rec) {
				record = (NaglowekRecord)rec;
			}

			public new void AssignParent(IRow parent, string name) {
				base.AssignParent(parent, name);
			}

			[MaxLength(10)]
			[Required]
			public string Kod {
				get {
					if (record==null) GetRecord();
					return record.Kod;
				}
				set {
					NaglowekSchema.KodBeforeEdit?.Invoke((Naglowek)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (string.IsNullOrEmpty(value)) throw new RequiredException(this, "Kod");
					if (value.Length>KodLength) throw new ValueToLongException(this, "Kod", KodLength);
					GetEdit(record==null, false);
					record.Kod = value;
					if (State!=RowState.Detached) {
						ResyncSet("WgKodu");
					}
					NaglowekSchema.KodAfterEdit?.Invoke((Naglowek)this);
				}
			}

			public const int KodLength = 10;

			[MaxLength(30)]
			[Required]
			public string Nazwa {
				get {
					if (record==null) GetRecord();
					return record.Nazwa;
				}
				set {
					NaglowekSchema.NazwaBeforeEdit?.Invoke((Naglowek)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (string.IsNullOrEmpty(value)) throw new RequiredException(this, "Nazwa");
					if (value.Length>NazwaLength) throw new ValueToLongException(this, "Nazwa", NazwaLength);
					GetEdit(record==null, false);
					record.Nazwa = value;
					NaglowekSchema.NazwaAfterEdit?.Invoke((Naglowek)this);
				}
			}

			public const int NazwaLength = 30;

			[MaxLength(80)]
			public string Opis {
				get {
					if (record==null) GetRecord();
					return record.Opis;
				}
				set {
					NaglowekSchema.OpisBeforeEdit?.Invoke((Naglowek)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (value.Length>OpisLength) throw new ValueToLongException(this, "Opis", OpisLength);
					GetEdit(record==null, false);
					record.Opis = value;
					NaglowekSchema.OpisAfterEdit?.Invoke((Naglowek)this);
				}
			}

			public const int OpisLength = 80;

			class KodRequiredVerifier : RequiredVerifier {
				internal KodRequiredVerifier(IRow row) : base(row, "Kod") {
				}
				protected override bool IsValid() => !(string.IsNullOrEmpty(((NaglowekRow)Row).Kod));
			}

			class NazwaRequiredVerifier : RequiredVerifier {
				internal NazwaRequiredVerifier(IRow row) : base(row, "Nazwa") {
				}
				protected override bool IsValid() => !(string.IsNullOrEmpty(((NaglowekRow)Row).Nazwa));
			}

			protected override void OnAdded() {
				base.OnAdded();
				Session.Verifiers.Add(new KodRequiredVerifier(this));
				Session.Verifiers.Add(new NazwaRequiredVerifier(this));
				NaglowekSchema.OnAdded?.Invoke((Naglowek)this);
			}

			protected override void OnLoaded() {
				base.OnLoaded();
				NaglowekSchema.OnLoaded?.Invoke((Naglowek)this);
			}

			protected override void OnEditing() {
				base.OnEditing();
				NaglowekSchema.OnEditing?.Invoke((Naglowek)this);
			}

			protected override void OnDeleting() {
				base.OnDeleting();
				NaglowekSchema.OnDeleting?.Invoke((Naglowek)this);
			}

			protected override void OnDeleted() {
				base.OnDeleted();
				NaglowekSchema.OnDeleted?.Invoke((Naglowek)this);
			}

			protected override void OnRepacked() {
				base.OnRepacked();
				NaglowekSchema.OnRepacked?.Invoke((Naglowek)this);
			}

			public Key WgKodu => Table.GetKeyByName(Prefix+".WgKodu");

		}

		public sealed class NaglowekRecord : Record {
			[Required]
			[MaxLength(10)]
			public string Kod = "";
			[Required]
			[MaxLength(30)]
			public string Nazwa = "";
			[MaxLength(80)]
			public string Opis = "";

			public override Record Clone() {
				NaglowekRecord rec = (NaglowekRecord)MemberwiseClone();
				return rec;
			}

			[Soneta.Langs.TranslateIgnore]
			public static void PrepareNames(StringBuilder names, string divider) {
				names.Append(divider); names.Append("Kod");
				names.Append(divider); names.Append("Nazwa");
				names.Append(divider); names.Append("Opis");
			}

			public override void Load(RecordReader creator) {
				Kod = creator.Read_string();
				Nazwa = creator.Read_string();
				Opis = creator.Read_string();
			}
		}

		public static class NaglowekSchema {

			internal static RowDelegate<NaglowekRow, string> KodBeforeEdit;
			public static void AddKodBeforeEdit(RowDelegate<NaglowekRow, string> value)
				=> KodBeforeEdit = (RowDelegate<NaglowekRow, string>)Delegate.Combine(KodBeforeEdit, value);

			internal static RowDelegate<NaglowekRow> KodAfterEdit;
			public static void AddKodAfterEdit(RowDelegate<NaglowekRow> value)
				=> KodAfterEdit = (RowDelegate<NaglowekRow>)Delegate.Combine(KodAfterEdit, value);

			internal static RowDelegate<NaglowekRow, string> NazwaBeforeEdit;
			public static void AddNazwaBeforeEdit(RowDelegate<NaglowekRow, string> value)
				=> NazwaBeforeEdit = (RowDelegate<NaglowekRow, string>)Delegate.Combine(NazwaBeforeEdit, value);

			internal static RowDelegate<NaglowekRow> NazwaAfterEdit;
			public static void AddNazwaAfterEdit(RowDelegate<NaglowekRow> value)
				=> NazwaAfterEdit = (RowDelegate<NaglowekRow>)Delegate.Combine(NazwaAfterEdit, value);

			internal static RowDelegate<NaglowekRow, string> OpisBeforeEdit;
			public static void AddOpisBeforeEdit(RowDelegate<NaglowekRow, string> value)
				=> OpisBeforeEdit = (RowDelegate<NaglowekRow, string>)Delegate.Combine(OpisBeforeEdit, value);

			internal static RowDelegate<NaglowekRow> OpisAfterEdit;
			public static void AddOpisAfterEdit(RowDelegate<NaglowekRow> value)
				=> OpisAfterEdit = (RowDelegate<NaglowekRow>)Delegate.Combine(OpisAfterEdit, value);

			internal static RowDelegate<NaglowekRow> OnLoaded;
			public static void AddOnLoaded(RowDelegate<NaglowekRow> value)
				=> OnLoaded = (RowDelegate<NaglowekRow>)Delegate.Combine(OnLoaded, value);

			internal static RowDelegate<NaglowekRow> OnAdded;
			public static void AddOnAdded(RowDelegate<NaglowekRow> value)
				=> OnAdded = (RowDelegate<NaglowekRow>)Delegate.Combine(OnAdded, value);

			internal static RowDelegate<NaglowekRow> OnEditing;
			public static void AddOnEditing(RowDelegate<NaglowekRow> value)
				=> OnEditing = (RowDelegate<NaglowekRow>)Delegate.Combine(OnEditing, value);

			internal static RowDelegate<NaglowekRow> OnDeleting;
			public static void AddOnDeleting(RowDelegate<NaglowekRow> value)
				=> OnDeleting = (RowDelegate<NaglowekRow>)Delegate.Combine(OnDeleting, value);

			internal static RowDelegate<NaglowekRow> OnDeleted;
			public static void AddOnDeleted(RowDelegate<NaglowekRow> value)
				=> OnDeleted = (RowDelegate<NaglowekRow>)Delegate.Combine(OnDeleted, value);

			internal static RowDelegate<NaglowekRow> OnRepacked;
			public static void AddOnRepacked(RowDelegate<NaglowekRow> value)
				=> OnRepacked = (RowDelegate<NaglowekRow>)Delegate.Combine(OnRepacked, value);

		}

	}

	[System.CodeDom.Compiler.GeneratedCode("Soneta.Generator", "4")]
	public static class StaticsNapojeModule {
		public static NapojeModule GetNapoje(this Session session) => NapojeModule.GetInstance(session);
	}

}

